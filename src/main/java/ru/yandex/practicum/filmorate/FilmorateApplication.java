package ru.yandex.practicum.filmorate;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class FilmorateApplication {

    public static void main(String[] args) {
        SpringApplication.run(FilmorateApplication.class, args);
    }
}
/*Семён, привет! Спасибо за ревью) Про комбинацию как раз ребята подсказали, когда я уже отчаялся искать во всём коде
ошибки в кодстайле)) Теперь буду знать)

FilmDao:
Дефолтный модификатор это я просто забыл написать его, private, конечно же. Самое интересное, что меня ничего не
смутило, когда я всё это проверял =_=
Список жанров заменил на LinkedHashSet, ты прав, я как-то об этом не подумал. Пока никак не уйду от того, что вижу
или думаю о списке, первое, что приходит на ум - List(ArrayList).

InMemoryFilmStorage и InMemoryUserStorage:
Да, согласен, что их надо удалить) Я в принципе это и сделал, потому что методы внутри них вообще ничего не делали.
А т.к. по ТЗ был пункт с @Qualifier решил его оставить, чтобы аннотация имела место) Если можно, я аннотацию оставлю.
Себе на будущее в качестве примера)

Genre и Mpa - простая невнимательность. Добавил модификаторы.

По поводу "create unique index if not exists USER_EMAIL_UINDEX on USERS (email);" - крутая вещь, спасибо!
Насколько я понял, этим значениям присваивается уникальный индекс и уже нельзя создать новую запись с такими же
значениями.

Для лайков и друзей выделил отдельные пакеты с сервисами и хранилищами. По сути сейчас они содержат логику по работе
с друзьями и лайками: содержат как сервис по работе с ними, так и соответствующие методы и запросы к БД.
В принципе идея хорошая - если вдруг что нужно будет сделать дополнительно, мои классы пользователей и фильмов
останутся нетронутыми. Разве что контроллер нужно будет подкорректировать.
Но отдельный контроллер и модель я делать не стал ни для лайков, ни для друзей, так как по сути они содержат только ID
фильмов и пользователей, т.е. не имеют своих собственных полей. Поэтому думаю, что в модели потребность отпадает.
Соответственно контроллеры относятся уже непосредственно к фильмам и пользователям - запросы идут именно через
"/films" и "/users" поэтому также не стал их реализовывать отдельно.
В целом это очень удобно в том плане, что методы с лайками и друзьями не теряются в общей куче методов, касающихся
фильмов и пользователей соответственно.

Также переделал тесты под эти изменения.
Буду ждать ответа :)
 */